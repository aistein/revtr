#! /usr/bin/python3
import os
import sys
import csv
import pyasn
import json
from ipaddress import ip_network
from collections import defaultdict

bgpdb = None

def slash_24_of(ip_str):
    dots = ip_str.strip().split('.')
    dots[-1] = '0/24'
    return '.'.join(dots)

def bgp_prfx_of(ip_str):
    _, prfx = bgpdb.lookup(ip_str)
    return prfx

def asn_of(ip_str):
    asn, _ = bgpdb.lookup(ip_str)
    return str(asn)

if __name__ == '__main__':

    ARGC = 5
    if len(sys.argv) < ARGC:
        #exit("Usage: evaluate_results_dir <reachables_dir> <results_dir> <K> <dnet_type> <opt: ipasn_file> ")
        exit("Usage: calc_algo_stats <test_dir> <rankings_dir> <K> <dnet_type> <opt: ipasn_file> ")

    #reachables_dir = sys.argv[1]
    test_dir = sys.argv[1]
    #results_dir = sys.argv[2]
    rankings_dir = sys.argv[2]
    K = int(sys.argv[3])
    dnet_type = sys.argv[4]
    ipasn_file = sys.argv[5] if len(sys.argv) > 5 else None

    if dnet_type not in ['bgp', 'asn', 's24']:
        exit('Illegal dnet type: \'{}\''.format(dnet_type))

    dnet_lookup = slash_24_of
    if dnet_type != 's24':
        bgpdb = pyasn.pyasn(ipasn_file)
        if dnet_type == 'asn':
            dnet_lookup = asn_of
        if dnet_type == 'bgp':
            dnet_lookup = bgp_prfx_of

    vp_dist_by_dest = defaultdict(list)
    #for csv_name in os.listdir(reachables_dir):
    for csv_name in os.listdir(test_dir):
        vp = csv_name.replace('.csv', '')

        #with open(os.path.join(reachables_dir, csv_name), 'r') as f:
        with open(os.path.join(test_dir, csv_name), 'r') as f:
            for row in csv.reader(f):
                dest = row[1]
                dist = int(row[2])
                vp_dist_by_dest[dest].append((vp, dist))

    set_cover_rankings = []
    #with open(os.path.join(results_dir, "set_cover_rankings.txt"), 'r') as f:
    with open(os.path.join(rankings_dir, "set_cover_rankings.txt"), 'r') as f:
        j = 0
        for i, line in enumerate(f):
            if line[0] == '#':
                j += 1
                continue
            if K < i - j + 1:
                break
            set_cover_rankings.append(line.strip().split()[0])

    ingr_rankings_by_dnet = {}
    #with open(os.path.join(results_dir, "ingress_cover", dnet_type, 'rankings_by_dnet.csv'), 'r') as f:
    with open(os.path.join(rankings_dir, "ingress_cover", dnet_type, 'rankings_by_dnet.csv'), 'r') as f:
        for row in csv.reader(f):
            ingr_rankings_by_dnet[row[0]] = row[1:]

    dst_rankings_by_dnet = {}
    #with open(os.path.join(results_dir, "destination_cover", dnet_type, 'rankings_by_dnet.csv'), 'r') as f:
    with open(os.path.join(rankings_dir, "destination_cover", dnet_type, 'rankings_by_dnet.csv'), 'r') as f:
        for row in csv.reader(f):
            dst_rankings_by_dnet[row[0]] = row[1:]

    print('# <destination>,<dnet>,<optimal_vp>,<optimal_dist>,<set_vp>,<set_dist>,<set_pings>,<ingr_vp>,<ingr_dist>,<inr_pings>,<dest_vp>,<dest_dist>,<dest_pings>')
    bad = 0
    for dest, vp_dist in vp_dist_by_dest.items():
        opt = [elem for elem in sorted(vp_dist, key=lambda x: int(x[1]) if int(x[1]) > 0 else 10)][0]
        dnet = dnet_lookup(dest)
        sys.stdout.write('{},{},{},{},'.format(dest, dnet, opt[0], opt[1]))

        dists = {vp: dist for vp, dist in vp_dist}
        found = False
        for i, vp in enumerate(set_cover_rankings):
            if vp in dists and dists[vp] < 10:
                    sys.stdout.write('{},{},{},'.format(vp, dists[vp], i + 1))
                    found = True
                    break
        if not found:
            #sys.stdout.write(',,,')
            sys.stdout.write(',,{},'.format(len(set_cover_rankings)))

        found = False
        if dnet in ingr_rankings_by_dnet: 
            for i, vp in enumerate(ingr_rankings_by_dnet[dnet]):
                if vp in dists and dists[vp] < 10:
                    sys.stdout.write('{},{},{},'.format(vp, dists[vp], i + 1))
                    found = True
                    break
            if not found:
                sys.stdout.write(',,{},'.format(len(ingr_rankings_by_dnet[dnet])))
        #if not found:
        else:
            sys.stdout.write(',,,')

        found = False
        if dnet in dst_rankings_by_dnet:
            for i, vp in enumerate(dst_rankings_by_dnet[dnet]):
                if vp in dists and dists[vp] < 10:
                    sys.stdout.write('{},{},{}'.format(vp, dists[vp], i + 1))
                    found = True
                    break
            if not found:
                sys.stdout.write(',,{}'.format(len(dst_rankings_by_dnet[dnet])))
        #if not found:
        else:
            sys.stdout.write(',,')
        sys.stdout.write('\n')
