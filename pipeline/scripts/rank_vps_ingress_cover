#! /usr/bin/python3

"""
 This script actually doesnt do the rankings,
 it just maps probes to ingresses and stores
 probe-ingress distance dumped to json

 6 different definitions of ingress:
 1) BGP-Prefix; First Inside
 2) ASN; First Inside
 3) /24; First Inside
 4) BGP-Prefix; First Outside
 5) ASN; First Outside
 6) /24; First Outside
"""

import os
import sys
import csv
from collections import defaultdict
from ipaddress import ip_address, ip_network
from collections import namedtuple
import pyasn
import json

DnetEntry = namedtuple('DnetEntry', ['asn','bgp','s24'])

if len(sys.argv) < 3:
    exit('Usage: rank_vps_ingress_cover <probes_directory> <output_tag> <ipasnfile>')

probe_dir = sys.argv[1]
out_file_fi = "{}-first_inside.json".format(sys.argv[2])
out_file_fo = "{}-first_outside.json".format(sys.argv[2])
ipasnfile = sys.argv[3]

print('loading ipasn file...')
bgpdb = pyasn.pyasn(ipasnfile)

def slash_24_of(ip_str):
    dots = ip_str.strip().split('.')
    dots[-1] = '0/24'
    return '.'.join(dots)

def bgp_prfx_of(ip_str):
    _, prfx = bgpdb.lookup(ip_str)
    return prfx

def asn_of(ip_str):
    asn, _ = bgpdb.lookup(ip_str)
    return str(asn)

def dnet_lookup(ip, dnet_type):
    if dnet_type == 's24':
        return slash_24_of(ip)
    if dnet_type == 'bgp':
        return bgp_prfx_of(ip)
    return asn_of(ip)

def ingr_lookup(hops, dnet, dnet_type):
    fi, dfi, fo, dfo = None, 0, None, 0
    for i, h in enumerate(hops):
        if dnet_lookup(h, dnet_type) == dnet:
            fi, dfi = h, i + 1  
        if dnet_lookup(h, dnet_type) == dnet and i > 0:
            fo, dfo = hops[i-1], i-1
        else:
            fo, dfo = None, -1
    return fi, dfi, fo, dfo

if __name__ == '__main__':

    vp_dists_by_ingrfi_by_dnet = defaultdict(
            lambda : defaultdict(
            lambda : defaultdict(list)))
    vp_dists_by_ingrfo_by_dnet = defaultdict(
            lambda : defaultdict(
            lambda : defaultdict(list)))

    for fname in os.listdir(probe_dir):

        vp = fname.replace('.csv', '')
        print('processing {}...'.format(vp))

        with open(os.path.join(probe_dir, fname), 'r') as f:
            next(f) # skip hader line
            for row in csv.reader(f):
                dentry = DnetEntry(*row[0:3])
                dest = row[3]
                hops = row[4:]

                for dnet_type in ['asn','bgp','s24']:
                    try:
                        # All the destinations chosen are grouped by prefix
                        # However, it is still interesting to ask "what is the ingress into this dnet"
                        # ... when 'ingress' can be into the ASN/Prefix/S24 that contains the dest
                        dnet = eval('dentry.{}'.format(dnet_type))
                        ingrfi, distfi, ingrfo, distfo = ingr_lookup(hops, dnet, dnet_type)
                    except: 
                        continue
                    if dnet and ingrfi:  # ok as long as neither is NIL
                        vp_dists_by_ingrfi_by_dnet[dnet][ingrfi][vp].append(distfi)
                        vp_dists_by_ingrfo_by_dnet[dnet][ingrfo][vp].append(distfo)

    with open(out_file_fi, 'w+') as fi, open(out_file_fo, 'w+') as fo:
        json.dump(vp_dists_by_ingrfi_by_dnet, fi)
        json.dump(vp_dists_by_ingrfo_by_dnet, fo)
