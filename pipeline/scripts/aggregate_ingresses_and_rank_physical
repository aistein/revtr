#! /usr/bin/python3 -u
import sys
import pickle
import heapq
import json

def min_vp_per_ingr(dists_by_vp_by_ingr):
    min_vp_by_ingr = {}
    for ingr, dists_by_vp in sorted(dists_by_vp_by_ingr.items(), key=lambda t: len(t[1])):
        min_vp, min_dist = '', float('inf')
        for vp, dists in dists_by_vp.items():
            local_min = min(dists)
            if local_min < min_dist:
                min_dist = local_min
                min_vp = vp 
        min_vp_by_ingr[ingr] = min_vp
    return min_vp_by_ingr

def min_vp_heap_per_ingr(dists_by_vp_by_ingr):
    min_vp_heap_by_ingr = {}
    for ingr, dists_by_vp in dists_by_vp_by_ingr.items():
        min_heap = []
        for vp, dists in dists_by_vp.items():
            heapq.heappush(min_heap, (min(dists), vp))
        min_vp_heap_by_ingr[ingr] = min_heap
    return min_vp_heap_by_ingr

if __name__ == '__main__':

    dists_by_vp_by_ingr_by_dnet = None

    if len(sys.argv) < 3:
        exit('usage: aggregate_ingresses_and_rank_physical <dists_by_vp_by_ingr_by_dnet>.json <ingr_rankings_out>.pkl')


    print("-I- rank_ingress_cover: loading json file...")
    with open(sys.argv[1], 'r') as f:
        dists_by_vp_by_ingr_by_dnet = json.loads(f.read())

    print("-I- rank_ingress_cover: ranking VPs...")
    min_vp_heap_by_ingr_by_dnet = {}
    with open(sys.argv[2], 'wb') as pkl:
        for dnet in dists_by_vp_by_ingr_by_dnet:
            print("-I- rank_ingress_cover: ranking VPs for dnet {}".format(dnet))
            min_vp_heap_by_ingr = min_vp_heap_per_ingr(dists_by_vp_by_ingr_by_dnet[dnet])
            min_vp_heap_by_ingr_by_dnet[dnet] = min_vp_heap_by_ingr
        pickle.dump(min_vp_heap_by_ingr_by_dnet, pkl, pickle.HIGHEST_PROTOCOL)
